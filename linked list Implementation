#include <iostream>

using namespace std;


struct Node {
    int row, col, value;
    Node* next;

    Node(int r, int c, int v) : row(r), col(c), value(v), next(nullptr) {}
};


class TheSparseMatrix {
private:
    Node* head;

public:
    TheSparseMatrix() : head(nullptr) {}


    void insert(int row, int col, int value) {
        if (value == 0) return; 

        Node* newNode = new Node(row, col, value);
        if (!head) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

   
    void displayIt() {
        Node* temp = head;
        if (!temp) {
            cout << "The matrix has no non-zero elements." << endl;
            return;
        }
        cout << "the Sparse Matrix Linked List Representation:" << endl;
        while (temp) {
            cout << "(" << temp->row << ", " << temp->col << ", " << temp->value << ") -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }

   
    ~TheSparseMatrix() {
        Node* temp;
        while (head) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    int rows, cols;

    
    cout << "Enter number of the rows: ";
    cin >> rows;
    cout << "Enter number of the columns: ";
    cin >> cols;

    
    int** matrix = new int*[rows];
    for (int i = 0; i < rows; i++) {
        matrix[i] = new int[cols];
    }

    
    cout << "Enter the matrix elements like row by row:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }

    TheSparseMatrix sm;

    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (matrix[i][j] != 0) {
                sm.insert(i, j, matrix[i][j]);
            }
        }
    }

    
    sm.displayIt();

    
    for (int i = 0; i < rows; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;

    return 0;
}
